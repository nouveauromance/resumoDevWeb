!! Introdu√ß√£o (evolu√ß√£o da Web, princ√≠pios b√°sicos)

üß† O que √© a Web?
A Web (World Wide Web) √© tipo uma "teia" de p√°ginas conectadas entre si. √â o que voc√™ acessa no navegador (Chrome, Firefox...) quando digita um site.

üìç Diferen√ßa entre Web e Internet:
Internet: a estrutura f√≠sica (cabos, servidores, redes).
Web: o conte√∫do que voc√™ acessa (sites, p√°ginas, apps).

üìà Evolu√ß√£o da Web:
. Web 1.0: Est√°tica, s√≥ leitura, sem intera√ß√£o.	Sites antigos de not√≠cias, tipo enciclop√©dias online.
. Web 2.0: Interativa, redes sociais, o usu√°rio participa.YouTube, Facebook, Twitter.
. Web 2.5: Foco em dispositivos m√≥veis.	Sites que se adaptam ao celular, PWAs.
. Web 3.0: Inteligente e descentralizada. Blockchain, IA, metaverso, criptomoedas.

üìå Princ√≠pios B√°sicos da Web:
. Cliente/Servidor: Seu navegador √© o cliente. Ele faz pedidos (requisi√ß√µes) para um servidor, que responde com o conte√∫do.
. HTML, CSS e JS: Linguagens da web. HTML estrutura, CSS estiliza, JavaScript d√° vida.
. HTTP/HTTPS: Protocolo de comunica√ß√£o (explicaremos mais no t√≥pico 3).
. URL: Endere√ßo √∫nico de cada p√°gina.

‚ú® Memoriza√ß√£o:
Pensar na Web como um restaurante
. Voc√™ (cliente) faz o pedido (requisi√ß√£o).
. O gar√ßom (navegador) leva at√© a cozinha (servidor).
. A cozinha prepara e envia a comida (resposta: p√°gina HTML, CSS, etc).

!! Versionamento com Git, GitHub e GitLab

üßæ O que √© o Git?
Git √© um sistema de versionamento de c√≥digo.
Tipo uma m√°quina do tempo dos seus arquivos (guarda tudo que voc√™ muda, ent√£o d√° pra voltar atr√°s, 
comparar vers√µes e trabalhar em equipe sem bagun√ßa).

üí° Met√°fora:
Voc√™ est√° escrevendo um livro com amigos. O Git √© tipo um caderno com todas as vers√µes do texto, 
e todo mundo escreve nele com canetas coloridas (pra saber quem fez o qu√™).

üîÅ Conceitos-chave:
Reposit√≥rio (repo) - Pasta onde o Git guarda seu projeto com hist√≥rico.
. Commit - Um "salvamento" com mensagem explicando a altera√ß√£o.
. Branch - Ramifica√ß√£o pra testar ou criar novas vers√µes sem afetar o c√≥digo principal.
. Merge - Unir duas branches. Ex: juntar um novo recurso com o c√≥digo principal.
. Clone - Baixar uma c√≥pia de um reposit√≥rio.
. Push / Pull -	Push (enviar pro reposit√≥rio online), Pull (trazer atualiza√ß√µes de l√°).

üåê GitHub e GitLab:
S√£o plataformas online onde voc√™ hospeda seus reposit√≥rios Git.
. GitHub: Mais popular no mundo. Foco em c√≥digo aberto e comunidade.
. GitLab: Tamb√©m √© muito usado, com mais op√ß√µes de automa√ß√µes (CI/CD) de forma gratuita.

üîë Git √© o motor, GitHub/GitLab s√£o os carros que usam ele pra rodar por a√≠.

üöÄ Ciclo b√°sico de uso:
# Cria um reposit√≥rio Git
git init

# Adiciona os arquivos para versionamento
git add .

# Cria um commit com mensagem
git commit -m "primeiro commit"

# Conecta ao GitHub
git remote add origin https://github.com/usuario/repositorio.git

# Envia pro reposit√≥rio online
git push -u origin main

‚ú® Dica de Memoriza√ß√£o:
Git √© o caderno de anota√ß√µes inteligente, e GitHub √© a nuvem onde voc√™ guarda tudo e compartilha com o mundo.

!! Fundamentos e Protocolos de Servi√ßos Web

üåê O que √© a Web?
A Web √© o que usamos pra acessar sites, apps online, APIs... √â baseada em:
. Servidores (onde os sites moram).
. Clientes (navegadores, apps... a gente que acessa).
. Protocolos (as regrinhas de como os dois conversam).

üì° HTTP ‚Äì O Protocolo da Web:
HTTP (HyperText Transfer Protocol) √© o protocolo usado pra trocar informa√ß√µes entre cliente e servidor.

üî§ M√©todos HTTP:
S√£o os tipos de pedidos que um cliente pode fazer:
. GET -	Buscar dados (ex: ver um post)
. POST - Enviar dados (ex: criar um post)
. PUT - Atualizar dados inteiros
. PATCH - Atualizar parcialmente
. DELETE - Deletar dados

üì¶ O que √© um Web Service?
Um web service √© um servi√ßo dispon√≠vel na internet que recebe e envia dados, normalmente em JSON ou XML.

üîß Ele funciona com requisi√ß√µes HTTP e responde com dados.

üí¨ JSON ‚Äì O formato mais usado da Web:
JSON (JavaScript Object Notation) √© a forma mais comum de enviar e receber dados entre frontend e backend.

{
  "nome": "Natali",
  "estudos": "Desenvolvimento Web III"
}

üìò APIs (Application Programming Interfaces):
S√£o os "card√°pios" de um sistema ‚Äî dizem quais dados voc√™ pode pedir e como pedir.

!! Node.js ‚Äì JavaScript no Backend

üí° O que √© o Node.js?
√â um runtime que permite rodar JavaScript fora do navegador, ou seja, no servidor.

üõ†Ô∏è Ele √© baseado no V8, o mesmo motor de JS do Google Chrome.

üí° Com o Node.js d√° pra:
. Criar servidores web. 
. Conectar com banco de dados. 
. Criar APIs. 
. Automatizar tarefas.

üß¨ Caracter√≠sticas do Node.js:
. Ass√≠ncrono - Executa v√°rias coisas ao mesmo tempo sem travar.
. Orientado a eventos - Reage a coisas que acontecem (tipo cliques, respostas de servidor).
. Leve e r√°pido	- Por usar o V8 e n√£o criar m√∫ltiplas threads.

üì¶ Gerenciador de pacotes ‚Äì npm:
O npm (Node Package Manager) √© tipo a Play Store do Node.

üí° Com ele voc√™ pode:
. Instalar pacotes (npm install express).
. Rodar scripts (npm run dev).
. Gerenciar depend√™ncias do projeto (package.json).

üèóÔ∏è Criando um projeto Node do zero:
// Criar e rodar pasta do projeto
mkdir resumo
cd resumo

// Inicializar com npm
npm init -y

// Criar o arquivo principal
touch index.js

// Executar
node index.js

üß™ Exemplo simples de servidor com Node usando framework (Express.js):
npm install express

const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(3000, () => {
  console.log('Servidor Express rodando.');
});

!! Web Services com Node.js e JSON

üß† O que s√£o Web Services?
S√£o servi√ßos acess√≠veis pela web que permitem que sistemas diferentes se comuniquem entre si.
Geralmente, s√£o APIs (Application Programming Interfaces) que recebem requisi√ß√µes e devolvem respostas.

üí¨ Qual √© o formato mais usado?
JSON (JavaScript Object Notation): leve, f√°cil de ler e trabalhar.

üí¨ Exemplo de um JSON:

{
  "nome": "Natali",
  "idade": 18,
  "faDe": "TXT"
}

üì° Criando uma API REST simples com Node.js + Express:

const express = require('express');
const app = express();

app.use(express.json());

const usuarios = [
  { id: 1, nome: "Beomgyu", idade: "24" },
  { id: 2, nome: "Huening Kai", idade: "22" }
];

app.get('/usuarios', (req, res) => {
  res.json(usuarios);
});

app.post('/usuarios', (req, res) => {
  const novoUsuario = req.body;
  usuarios.push(novoUsuario);
  res.status(201).json(novoUsuario);
});

app.listen(3000, () => {
  console.log('API rodando em http://localhost:3000');
});

üõ†Ô∏è Verbos HTTP + Rotas REST:
. GET	- Buscar dados
. POST - Criar dados
. PUT - Atualizar dados
. DELETE - Apagar dados

üß™ Teste essas rotas no Postman:
. GET /usuarios ‚Üí ver todos os dados
. POST /usuarios ‚Üí enviar novo JSON

{
  "id": 3,
  "nome": "Beomgyu √© meu favorito.",
  "favorito": "Beomgyu"
}

!! Promises, Callbacks, Async e Await

üß† Esses quatro conceitos s√£o formas de lidar com c√≥digo ass√≠ncrono no JavaScript ‚Äî ou seja, c√≥digo que n√£o 
espera uma tarefa terminar pra continuar rodando. Isso √© essencial pra coisas como chamadas de API, leitura de arquivos, etc.

üîÅ Callbacks:
Um callback √©  uma fun√ß√£o passada como argumento para outra fun√ß√£o, que ser√° executada quando a tarefa terminar.

function pegarDados(callback) {
  setTimeout(() => {
    callback("Dados recebidos.");
  }, 1000);
}

pegarDados((mensagem) => {
  console.log(mensagem); // "Dados recebidos."
});

Problemas: quando voc√™ aninha muitos callbacks, surge o famoso ‚Äúcallback hell‚Äù, que torna o c√≥digo dif√≠cil de ler e manter.

üåÄ Promises:
Uma Promise representa uma opera√ß√£o ass√≠ncrona que pode estar:
. pending (pendente)
. fulfilled (realizada com sucesso)
. rejected (falhou)

const promessa = new Promise((resolve, reject) => {
  let sucesso = true;
  if (sucesso) {
    resolve("Deu certo.");
  } else {
    reject("Deu ruim.");
  }
});

promessa
  .then((mensagem) => console.log(mensagem))
  .catch((erro) => console.error(erro));

‚è≥ Async/Await:
Forma moderna e mais leg√≠vel de lidar com Promises. async transforma uma fun√ß√£o em algo que retorna uma Promise. 
await faz o c√≥digo ‚Äúesperar‚Äù pela resolu√ß√£o da Promise.

async function pegarMensagem() {
  try {
    const resposta = await promessa;
    console.log(resposta);
  } catch (erro) {
    console.error(erro);
  }
}

pegarMensagem();
